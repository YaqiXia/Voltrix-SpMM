diff --git a/CMakeLists.txt b/CMakeLists.txt
index bf74969..a690c22 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -7,15 +7,6 @@ set(CMAKE_CUDA_STANDARD 14)
 
 add_definitions(-w)
 
-find_package(CUDA)
-include(FindCUDA/select_compute_arch)
-CUDA_DETECT_INSTALLED_GPUS(INSTALLED_GPU_CCS_1)
-string(STRIP "${INSTALLED_GPU_CCS_1}" INSTALLED_GPU_CCS_2)
-string(REPLACE " " ";" INSTALLED_GPU_CCS_3 "${INSTALLED_GPU_CCS_2}")
-string(REPLACE "." "" CUDA_ARCH_LIST "${INSTALLED_GPU_CCS_3}")
-message("-- nvcc generates code for arch ${CUDA_ARCH_LIST}")
-SET(CMAKE_CUDA_ARCHITECTURES ${CUDA_ARCH_LIST})
-# cmake_policy(SET CMP0104 OLD)
 
 set(CMAKE_CXX_STANDARD 17)
 
@@ -31,7 +22,8 @@ set(RoDe_SPMM_LIBS ${PROJECT_SOURCE_DIR}/RoDe_SpMM)
 set(RoDe_SDDMM_LIBS ${PROJECT_SOURCE_DIR}/RoDe_SDDMM)
 
 
-include_directories(${PROJECT_SOURCE_DIR})
+include_directories(${PROJECT_SOURCE_DIR} ${GLOG_INCLUDE_DIR})
+link_libraries(${GLOG_LIBRARY})
 
 set(CUDA_NVCC_FLAGS -gencode arch=compute_80,code=sm_80;-G;-g)
 set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --use_fast_math -Xcompiler -fopenmp -gencode arch=compute_80,code=sm_80")
@@ -43,16 +35,16 @@ MESSAGE( STATUS "this var key = ${CMAKE_CUDA_FLAGS}.")
 
 add_subdirectory(utils)
 add_subdirectory(Sputnik_SpMM)
-add_subdirectory(Sputnik_SDDMM)
+# add_subdirectory(Sputnik_SDDMM)
 
 add_subdirectory(cuSparse_SpMM)
 
 add_subdirectory(ASpT_SpMM_GPU)
-add_subdirectory(ASpT_SDDMM_GPU)
+# add_subdirectory(ASpT_SDDMM_GPU)
 
-add_subdirectory(RoDe_SDDMM)
+# add_subdirectory(RoDe_SDDMM)
 add_subdirectory(RoDe_SpMM)
 
-add_subdirectory(mat_prof)
+# add_subdirectory(mat_prof)
 add_subdirectory(eval)
 add_subdirectory(Preprocess_opt)
diff --git a/eval/CMakeLists.txt b/eval/CMakeLists.txt
index 6dc3413..a3b2cb5 100644
--- a/eval/CMakeLists.txt
+++ b/eval/CMakeLists.txt
@@ -14,6 +14,18 @@ target_link_libraries(eval_spmm_f32_n32 utils sputnik_spmm cuSPARSE_spmm RoDe_sp
 add_executable(eval_spmm_f32_n128 eval_spmm_f32_n128.cu)
 target_link_libraries(eval_spmm_f32_n128 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
 
+## 256
+add_executable(eval_spmm_f32_n256 eval_spmm_f32_n256.cu)
+target_link_libraries(eval_spmm_f32_n256 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
+
+## 512
+add_executable(eval_spmm_f32_n512 eval_spmm_f32_n512.cu)
+target_link_libraries(eval_spmm_f32_n512 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
+
+## 1024
+add_executable(eval_spmm_f32_n1024 eval_spmm_f32_n1024.cu)
+target_link_libraries(eval_spmm_f32_n1024 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
+
 add_executable(eval_spmm_f64_n32 eval_spmm_f64_n32.cu)
 target_link_libraries(eval_spmm_f64_n32 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
 
@@ -22,11 +34,5 @@ target_link_libraries(eval_spmm_f64_n128_p1 utils sputnik_spmm cuSPARSE_spmm RoD
 add_executable(eval_spmm_f64_n128_p2 eval_spmm_f64_n128_p2.cu)
 target_link_libraries(eval_spmm_f64_n128_p2 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
 
-add_executable(eval_sddmm_f32_n32 eval_sddmm_f32_n32.cu)
-target_link_libraries(eval_sddmm_f32_n32 sputnik_sddmm utils RoDe_sddmm)
-
-add_executable(eval_sddmm_f32_n128 eval_sddmm_f32_n128.cu)
-target_link_libraries(eval_sddmm_f32_n128 sputnik_sddmm utils RoDe_sddmm)
-
 add_executable(get_matrix_info get_matrix_info.cu)
 target_link_libraries(get_matrix_info utils)
\ No newline at end of file
diff --git a/eval/eval_spmm_f32_n1024.cu b/eval/eval_spmm_f32_n1024.cu
new file mode 100644
index 0000000..4541ab9
--- /dev/null
+++ b/eval/eval_spmm_f32_n1024.cu
@@ -0,0 +1,191 @@
+#include "cuda_runtime.h"
+#include "matrix_utils.h"
+
+#include "Sputnik_spmm.h"
+#include "cuSPARSE_spmm.h"
+#include "RoDeSpmm.h"
+
+#include <sys/io.h>
+#include <iostream>
+#include <stdio.h>
+#include <unistd.h>
+#include <dirent.h>
+#include <stdlib.h>
+#include <sys/stat.h>
+
+using namespace std;
+using namespace SPC;
+
+#define SEG_LENGTH 512
+
+#define BN 1024
+
+__global__ void MatrixDiff(int n,float* res,float* A,float* B) {
+    if(threadIdx.x == 0 && blockIdx.x == 0)
+        res[0] = 0.0f;
+    
+    __syncthreads();
+
+    int idx = blockIdx.x * blockDim.x + threadIdx.x;
+    if(idx >= n) return;
+    float diff = abs(A[idx] - B[idx]);
+
+    // if(diff > 1e-5) {
+    //     printf("[%d] : %f ~ %f\n",idx,A[idx],B[idx]);
+    // }
+
+    float r = diff;
+    r += __shfl_down_sync(0xffffffff,r,16);
+    r += __shfl_down_sync(0xffffffff,r,8);
+    r += __shfl_down_sync(0xffffffff,r,4);
+    r += __shfl_down_sync(0xffffffff,r,2);
+    r += __shfl_down_sync(0xffffffff,r,1);
+
+    if(threadIdx.x == 0)
+        atomicAdd(res,r);
+
+    __syncthreads();
+    if(threadIdx.x == 0 && blockIdx.x == 0)
+        printf("Matrix diff: %f\n",res[0]);
+}
+
+__global__ void PrintArray(int n,float* array) {
+    for(int i=0; i < n; ++ i)
+        printf("Array[%d]:%f\n",i,array[i]);
+}
+
+__global__ void PrintArrayInt(int n,int* array) {
+    for(int i=0; i < n; ++ i)
+        printf("IntArray[%d]:%d\n",i,array[i]);
+}
+
+int main(int argc,char **argv) {
+
+    // cudaSetDevice(1);
+
+    string file_path;
+    if(argc < 2) {
+        cout<<"No file path"<<endl;
+        return 0;
+    }
+    else {
+        file_path = argv[1];
+    }
+
+    int ITER = 10;
+
+    cudaStream_t stream1,stream2;
+    cudaStreamCreate(&stream1);
+    cudaStreamCreate(&stream2);
+
+    double gflops = 0.0f;
+
+    // cout<<file_path<<endl;
+
+    SPC::SparseMatrix sm1(file_path,SPC::SORTED,1);
+
+    int * row_offset_h = sm1.RowOffsets();
+    int * row_indices_h = sm1.RowIndices();
+
+    sm1.RowDivide2Segment(SEG_LENGTH,4,32);
+    
+    SPC::CudaSparseMatrix<float> c_sm(sm1);
+
+    int m = c_sm.Rows(), k = c_sm.Columns(), n = BN;
+
+    absl::BitGen bitgen;
+    SPC::CudaMatrix<float> d_B(k, n ,&bitgen);
+    
+    float* d_C;
+    cudaMalloc((void**)&d_C,sizeof(float)*m*n);
+
+    float* d_C1;
+    cudaMalloc((void**)&d_C1,sizeof(float)*m*n);
+
+    float* d_C2;
+    cudaMalloc((void**)&d_C2,sizeof(float)*m*n);
+
+    float* diff;
+    cudaMalloc((void**)&diff,sizeof(float)*1);
+
+    float tot_ms;
+    cudaEvent_t event1,event2;
+    cudaEventCreate(&event1);
+    cudaEventCreate(&event2);
+
+    cudaDeviceSynchronize();
+    cudaEventRecord(event1,0);
+    for(int i=0; i < ITER; ++i)
+        SPC::SputnikSpmm(m,c_sm.Columns(),n,c_sm.Nonzeros(),
+                    c_sm.RowIndices(),c_sm.Values(),c_sm.RowOffsets(),c_sm.ColumnIndices(),
+                    d_B.Values(),
+                    d_C1,
+                    stream1);
+
+    cudaEventRecord(event2,0);
+
+    cudaEventSynchronize(event1);
+    cudaEventSynchronize(event2);
+    cudaEventElapsedTime(&tot_ms, event1, event2);
+    cudaDeviceSynchronize();
+
+    gflops = (double)ITER * (double)c_sm.Nonzeros() * 2 * n / tot_ms / 1000000;
+
+    printf(", %f, %f",tot_ms,gflops);
+
+
+    cuSparse_SPMM<float> cu_sp;
+
+    cu_sp.Preprocess(m,c_sm.Columns(),c_sm.Nonzeros(),
+                    c_sm.RowOffsets(),c_sm.ColumnIndices(),c_sm.Values());
+
+    cudaDeviceSynchronize();
+    cudaEventRecord(event1,0);
+
+    for(int i=0; i < ITER; ++i)
+        cu_sp.Process(n,d_B.Values(),d_C);
+
+    cudaEventRecord(event2,0);
+
+    cudaEventSynchronize(event1);
+    cudaEventSynchronize(event2);
+    cudaEventElapsedTime(&tot_ms, event1, event2);
+    cudaDeviceSynchronize();
+
+    gflops = (double)ITER * (double)c_sm.Nonzeros() * 2 * n / tot_ms / 1000000;
+
+    printf(", %f, %f",tot_ms,gflops);
+
+
+    cudaDeviceSynchronize();
+    cudaEventRecord(event1,0);
+
+    for(int i = 0; i < ITER; ++i)
+        RoDeSpmm_n128(c_sm.n_segs,c_sm.n_segs_residue,c_sm.Columns(),n,
+                        c_sm.Values(),c_sm.ColumnIndices(),c_sm.RowOffsets(),
+                       c_sm.seg_row_indices,c_sm.seg_row_indices_residue,c_sm.seg_st_offsets,
+                       d_B.Values(),d_C2,stream1,stream2);
+
+    cudaEventRecord(event2,0);
+
+    cudaEventSynchronize(event1);
+    cudaEventSynchronize(event2);
+    cudaEventElapsedTime(&tot_ms, event1, event2);
+    cudaDeviceSynchronize();
+
+    gflops = (double)ITER * (double)c_sm.Nonzeros() * 2 * n / tot_ms / 1000000;
+
+    printf(", %f, %f\n",tot_ms,gflops);
+
+    // //    To validate, let ‘ITER’ be 1
+    // MatrixDiff<<<(m*n+31)/32,32>>>(m*n,diff,d_C,d_C1);
+    // MatrixDiff<<<(m*n+31)/32,32>>>(m*n,diff,d_C,d_C2);
+
+    cudaFree(d_C);
+    cudaFree(d_C1);
+    cudaFree(d_C2);
+    cudaFree(diff);
+	
+    return 0;
+}
+// 
diff --git a/eval/eval_spmm_f32_n256.cu b/eval/eval_spmm_f32_n256.cu
new file mode 100644
index 0000000..95c3acd
--- /dev/null
+++ b/eval/eval_spmm_f32_n256.cu
@@ -0,0 +1,191 @@
+#include "cuda_runtime.h"
+#include "matrix_utils.h"
+
+#include "Sputnik_spmm.h"
+#include "cuSPARSE_spmm.h"
+#include "RoDeSpmm.h"
+
+#include <sys/io.h>
+#include <iostream>
+#include <stdio.h>
+#include <unistd.h>
+#include <dirent.h>
+#include <stdlib.h>
+#include <sys/stat.h>
+
+using namespace std;
+using namespace SPC;
+
+#define SEG_LENGTH 512
+
+#define BN 256
+
+__global__ void MatrixDiff(int n,float* res,float* A,float* B) {
+    if(threadIdx.x == 0 && blockIdx.x == 0)
+        res[0] = 0.0f;
+    
+    __syncthreads();
+
+    int idx = blockIdx.x * blockDim.x + threadIdx.x;
+    if(idx >= n) return;
+    float diff = abs(A[idx] - B[idx]);
+
+    // if(diff > 1e-5) {
+    //     printf("[%d] : %f ~ %f\n",idx,A[idx],B[idx]);
+    // }
+
+    float r = diff;
+    r += __shfl_down_sync(0xffffffff,r,16);
+    r += __shfl_down_sync(0xffffffff,r,8);
+    r += __shfl_down_sync(0xffffffff,r,4);
+    r += __shfl_down_sync(0xffffffff,r,2);
+    r += __shfl_down_sync(0xffffffff,r,1);
+
+    if(threadIdx.x == 0)
+        atomicAdd(res,r);
+
+    __syncthreads();
+    if(threadIdx.x == 0 && blockIdx.x == 0)
+        printf("Matrix diff: %f\n",res[0]);
+}
+
+__global__ void PrintArray(int n,float* array) {
+    for(int i=0; i < n; ++ i)
+        printf("Array[%d]:%f\n",i,array[i]);
+}
+
+__global__ void PrintArrayInt(int n,int* array) {
+    for(int i=0; i < n; ++ i)
+        printf("IntArray[%d]:%d\n",i,array[i]);
+}
+
+int main(int argc,char **argv) {
+
+    // cudaSetDevice(1);
+
+    string file_path;
+    if(argc < 2) {
+        cout<<"No file path"<<endl;
+        return 0;
+    }
+    else {
+        file_path = argv[1];
+    }
+
+    int ITER = 10;
+
+    cudaStream_t stream1,stream2;
+    cudaStreamCreate(&stream1);
+    cudaStreamCreate(&stream2);
+
+    double gflops = 0.0f;
+
+    // cout<<file_path<<endl;
+
+    SPC::SparseMatrix sm1(file_path,SPC::SORTED,1);
+
+    int * row_offset_h = sm1.RowOffsets();
+    int * row_indices_h = sm1.RowIndices();
+
+    sm1.RowDivide2Segment(SEG_LENGTH,4,32);
+    
+    SPC::CudaSparseMatrix<float> c_sm(sm1);
+
+    int m = c_sm.Rows(), k = c_sm.Columns(), n = BN;
+
+    absl::BitGen bitgen;
+    SPC::CudaMatrix<float> d_B(k, n ,&bitgen);
+    
+    float* d_C;
+    cudaMalloc((void**)&d_C,sizeof(float)*m*n);
+
+    float* d_C1;
+    cudaMalloc((void**)&d_C1,sizeof(float)*m*n);
+
+    float* d_C2;
+    cudaMalloc((void**)&d_C2,sizeof(float)*m*n);
+
+    float* diff;
+    cudaMalloc((void**)&diff,sizeof(float)*1);
+
+    float tot_ms;
+    cudaEvent_t event1,event2;
+    cudaEventCreate(&event1);
+    cudaEventCreate(&event2);
+
+    cudaDeviceSynchronize();
+    cudaEventRecord(event1,0);
+    for(int i=0; i < ITER; ++i)
+        SPC::SputnikSpmm(m,c_sm.Columns(),n,c_sm.Nonzeros(),
+                    c_sm.RowIndices(),c_sm.Values(),c_sm.RowOffsets(),c_sm.ColumnIndices(),
+                    d_B.Values(),
+                    d_C1,
+                    stream1);
+
+    cudaEventRecord(event2,0);
+
+    cudaEventSynchronize(event1);
+    cudaEventSynchronize(event2);
+    cudaEventElapsedTime(&tot_ms, event1, event2);
+    cudaDeviceSynchronize();
+
+    gflops = (double)ITER * (double)c_sm.Nonzeros() * 2 * n / tot_ms / 1000000;
+
+    printf(", %f, %f",tot_ms,gflops);
+
+
+    cuSparse_SPMM<float> cu_sp;
+
+    cu_sp.Preprocess(m,c_sm.Columns(),c_sm.Nonzeros(),
+                    c_sm.RowOffsets(),c_sm.ColumnIndices(),c_sm.Values());
+
+    cudaDeviceSynchronize();
+    cudaEventRecord(event1,0);
+
+    for(int i=0; i < ITER; ++i)
+        cu_sp.Process(n,d_B.Values(),d_C);
+
+    cudaEventRecord(event2,0);
+
+    cudaEventSynchronize(event1);
+    cudaEventSynchronize(event2);
+    cudaEventElapsedTime(&tot_ms, event1, event2);
+    cudaDeviceSynchronize();
+
+    gflops = (double)ITER * (double)c_sm.Nonzeros() * 2 * n / tot_ms / 1000000;
+
+    printf(", %f, %f",tot_ms,gflops);
+
+
+    cudaDeviceSynchronize();
+    cudaEventRecord(event1,0);
+
+    for(int i = 0; i < ITER; ++i)
+        RoDeSpmm_n128(c_sm.n_segs,c_sm.n_segs_residue,c_sm.Columns(),n,
+                        c_sm.Values(),c_sm.ColumnIndices(),c_sm.RowOffsets(),
+                       c_sm.seg_row_indices,c_sm.seg_row_indices_residue,c_sm.seg_st_offsets,
+                       d_B.Values(),d_C2,stream1,stream2);
+
+    cudaEventRecord(event2,0);
+
+    cudaEventSynchronize(event1);
+    cudaEventSynchronize(event2);
+    cudaEventElapsedTime(&tot_ms, event1, event2);
+    cudaDeviceSynchronize();
+
+    gflops = (double)ITER * (double)c_sm.Nonzeros() * 2 * n / tot_ms / 1000000;
+
+    printf(", %f, %f\n",tot_ms,gflops);
+
+    // //    To validate, let ‘ITER’ be 1
+    // MatrixDiff<<<(m*n+31)/32,32>>>(m*n,diff,d_C,d_C1);
+    // MatrixDiff<<<(m*n+31)/32,32>>>(m*n,diff,d_C,d_C2);
+
+    cudaFree(d_C);
+    cudaFree(d_C1);
+    cudaFree(d_C2);
+    cudaFree(diff);
+	
+    return 0;
+}
+// 
diff --git a/eval/eval_spmm_f32_n512.cu b/eval/eval_spmm_f32_n512.cu
new file mode 100644
index 0000000..8dcadc3
--- /dev/null
+++ b/eval/eval_spmm_f32_n512.cu
@@ -0,0 +1,191 @@
+#include "cuda_runtime.h"
+#include "matrix_utils.h"
+
+#include "Sputnik_spmm.h"
+#include "cuSPARSE_spmm.h"
+#include "RoDeSpmm.h"
+
+#include <sys/io.h>
+#include <iostream>
+#include <stdio.h>
+#include <unistd.h>
+#include <dirent.h>
+#include <stdlib.h>
+#include <sys/stat.h>
+
+using namespace std;
+using namespace SPC;
+
+#define SEG_LENGTH 512
+
+#define BN 512
+
+__global__ void MatrixDiff(int n,float* res,float* A,float* B) {
+    if(threadIdx.x == 0 && blockIdx.x == 0)
+        res[0] = 0.0f;
+    
+    __syncthreads();
+
+    int idx = blockIdx.x * blockDim.x + threadIdx.x;
+    if(idx >= n) return;
+    float diff = abs(A[idx] - B[idx]);
+
+    // if(diff > 1e-5) {
+    //     printf("[%d] : %f ~ %f\n",idx,A[idx],B[idx]);
+    // }
+
+    float r = diff;
+    r += __shfl_down_sync(0xffffffff,r,16);
+    r += __shfl_down_sync(0xffffffff,r,8);
+    r += __shfl_down_sync(0xffffffff,r,4);
+    r += __shfl_down_sync(0xffffffff,r,2);
+    r += __shfl_down_sync(0xffffffff,r,1);
+
+    if(threadIdx.x == 0)
+        atomicAdd(res,r);
+
+    __syncthreads();
+    if(threadIdx.x == 0 && blockIdx.x == 0)
+        printf("Matrix diff: %f\n",res[0]);
+}
+
+__global__ void PrintArray(int n,float* array) {
+    for(int i=0; i < n; ++ i)
+        printf("Array[%d]:%f\n",i,array[i]);
+}
+
+__global__ void PrintArrayInt(int n,int* array) {
+    for(int i=0; i < n; ++ i)
+        printf("IntArray[%d]:%d\n",i,array[i]);
+}
+
+int main(int argc,char **argv) {
+
+    // cudaSetDevice(1);
+
+    string file_path;
+    if(argc < 2) {
+        cout<<"No file path"<<endl;
+        return 0;
+    }
+    else {
+        file_path = argv[1];
+    }
+
+    int ITER = 10;
+
+    cudaStream_t stream1,stream2;
+    cudaStreamCreate(&stream1);
+    cudaStreamCreate(&stream2);
+
+    double gflops = 0.0f;
+
+    // cout<<file_path<<endl;
+
+    SPC::SparseMatrix sm1(file_path,SPC::SORTED,1);
+
+    int * row_offset_h = sm1.RowOffsets();
+    int * row_indices_h = sm1.RowIndices();
+
+    sm1.RowDivide2Segment(SEG_LENGTH,4,32);
+    
+    SPC::CudaSparseMatrix<float> c_sm(sm1);
+
+    int m = c_sm.Rows(), k = c_sm.Columns(), n = BN;
+
+    absl::BitGen bitgen;
+    SPC::CudaMatrix<float> d_B(k, n ,&bitgen);
+    
+    float* d_C;
+    cudaMalloc((void**)&d_C,sizeof(float)*m*n);
+
+    float* d_C1;
+    cudaMalloc((void**)&d_C1,sizeof(float)*m*n);
+
+    float* d_C2;
+    cudaMalloc((void**)&d_C2,sizeof(float)*m*n);
+
+    float* diff;
+    cudaMalloc((void**)&diff,sizeof(float)*1);
+
+    float tot_ms;
+    cudaEvent_t event1,event2;
+    cudaEventCreate(&event1);
+    cudaEventCreate(&event2);
+
+    cudaDeviceSynchronize();
+    cudaEventRecord(event1,0);
+    for(int i=0; i < ITER; ++i)
+        SPC::SputnikSpmm(m,c_sm.Columns(),n,c_sm.Nonzeros(),
+                    c_sm.RowIndices(),c_sm.Values(),c_sm.RowOffsets(),c_sm.ColumnIndices(),
+                    d_B.Values(),
+                    d_C1,
+                    stream1);
+
+    cudaEventRecord(event2,0);
+
+    cudaEventSynchronize(event1);
+    cudaEventSynchronize(event2);
+    cudaEventElapsedTime(&tot_ms, event1, event2);
+    cudaDeviceSynchronize();
+
+    gflops = (double)ITER * (double)c_sm.Nonzeros() * 2 * n / tot_ms / 1000000;
+
+    printf(", %f, %f",tot_ms,gflops);
+
+
+    cuSparse_SPMM<float> cu_sp;
+
+    cu_sp.Preprocess(m,c_sm.Columns(),c_sm.Nonzeros(),
+                    c_sm.RowOffsets(),c_sm.ColumnIndices(),c_sm.Values());
+
+    cudaDeviceSynchronize();
+    cudaEventRecord(event1,0);
+
+    for(int i=0; i < ITER; ++i)
+        cu_sp.Process(n,d_B.Values(),d_C);
+
+    cudaEventRecord(event2,0);
+
+    cudaEventSynchronize(event1);
+    cudaEventSynchronize(event2);
+    cudaEventElapsedTime(&tot_ms, event1, event2);
+    cudaDeviceSynchronize();
+
+    gflops = (double)ITER * (double)c_sm.Nonzeros() * 2 * n / tot_ms / 1000000;
+
+    printf(", %f, %f",tot_ms,gflops);
+
+
+    cudaDeviceSynchronize();
+    cudaEventRecord(event1,0);
+
+    for(int i = 0; i < ITER; ++i)
+        RoDeSpmm_n128(c_sm.n_segs,c_sm.n_segs_residue,c_sm.Columns(),n,
+                        c_sm.Values(),c_sm.ColumnIndices(),c_sm.RowOffsets(),
+                       c_sm.seg_row_indices,c_sm.seg_row_indices_residue,c_sm.seg_st_offsets,
+                       d_B.Values(),d_C2,stream1,stream2);
+
+    cudaEventRecord(event2,0);
+
+    cudaEventSynchronize(event1);
+    cudaEventSynchronize(event2);
+    cudaEventElapsedTime(&tot_ms, event1, event2);
+    cudaDeviceSynchronize();
+
+    gflops = (double)ITER * (double)c_sm.Nonzeros() * 2 * n / tot_ms / 1000000;
+
+    printf(", %f, %f\n",tot_ms,gflops);
+
+    // //    To validate, let ‘ITER’ be 1
+    // MatrixDiff<<<(m*n+31)/32,32>>>(m*n,diff,d_C,d_C1);
+    // MatrixDiff<<<(m*n+31)/32,32>>>(m*n,diff,d_C,d_C2);
+
+    cudaFree(d_C);
+    cudaFree(d_C1);
+    cudaFree(d_C2);
+    cudaFree(diff);
+	
+    return 0;
+}
+// 
diff --git a/utils/common_utils.h b/utils/common_utils.h
index c450b9b..43ee54e 100644
--- a/utils/common_utils.h
+++ b/utils/common_utils.h
@@ -1,6 +1,7 @@
 #ifndef SPC_COMMON_UTILS_H_
 #define SPC_COMMON_UTILS_H_
 
+#include <cstdint>
 #include "basic_utils.h"
 namespace SPC {
 
