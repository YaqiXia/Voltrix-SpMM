diff --git a/CMakeLists.txt b/CMakeLists.txt
index bf74969..a690c22 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -7,15 +7,6 @@ set(CMAKE_CUDA_STANDARD 14)
 
 add_definitions(-w)
 
-find_package(CUDA)
-include(FindCUDA/select_compute_arch)
-CUDA_DETECT_INSTALLED_GPUS(INSTALLED_GPU_CCS_1)
-string(STRIP "${INSTALLED_GPU_CCS_1}" INSTALLED_GPU_CCS_2)
-string(REPLACE " " ";" INSTALLED_GPU_CCS_3 "${INSTALLED_GPU_CCS_2}")
-string(REPLACE "." "" CUDA_ARCH_LIST "${INSTALLED_GPU_CCS_3}")
-message("-- nvcc generates code for arch ${CUDA_ARCH_LIST}")
-SET(CMAKE_CUDA_ARCHITECTURES ${CUDA_ARCH_LIST})
-# cmake_policy(SET CMP0104 OLD)
 
 set(CMAKE_CXX_STANDARD 17)
 
@@ -31,7 +22,8 @@ set(RoDe_SPMM_LIBS ${PROJECT_SOURCE_DIR}/RoDe_SpMM)
 set(RoDe_SDDMM_LIBS ${PROJECT_SOURCE_DIR}/RoDe_SDDMM)
 
 
-include_directories(${PROJECT_SOURCE_DIR})
+include_directories(${PROJECT_SOURCE_DIR} ${GLOG_INCLUDE_DIR})
+link_libraries(${GLOG_LIBRARY})
 
 set(CUDA_NVCC_FLAGS -gencode arch=compute_80,code=sm_80;-G;-g)
 set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --use_fast_math -Xcompiler -fopenmp -gencode arch=compute_80,code=sm_80")
@@ -43,16 +35,16 @@ MESSAGE( STATUS "this var key = ${CMAKE_CUDA_FLAGS}.")
 
 add_subdirectory(utils)
 add_subdirectory(Sputnik_SpMM)
-add_subdirectory(Sputnik_SDDMM)
+# add_subdirectory(Sputnik_SDDMM)
 
 add_subdirectory(cuSparse_SpMM)
 
 add_subdirectory(ASpT_SpMM_GPU)
-add_subdirectory(ASpT_SDDMM_GPU)
+# add_subdirectory(ASpT_SDDMM_GPU)
 
-add_subdirectory(RoDe_SDDMM)
+# add_subdirectory(RoDe_SDDMM)
 add_subdirectory(RoDe_SpMM)
 
-add_subdirectory(mat_prof)
+# add_subdirectory(mat_prof)
 add_subdirectory(eval)
 add_subdirectory(Preprocess_opt)
diff --git a/eval/CMakeLists.txt b/eval/CMakeLists.txt
index 6dc3413..a3b2cb5 100644
--- a/eval/CMakeLists.txt
+++ b/eval/CMakeLists.txt
@@ -14,6 +14,18 @@ target_link_libraries(eval_spmm_f32_n32 utils sputnik_spmm cuSPARSE_spmm RoDe_sp
 add_executable(eval_spmm_f32_n128 eval_spmm_f32_n128.cu)
 target_link_libraries(eval_spmm_f32_n128 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
 
+## 256
+add_executable(eval_spmm_f32_n256 eval_spmm_f32_n256.cu)
+target_link_libraries(eval_spmm_f32_n256 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
+
+## 512
+add_executable(eval_spmm_f32_n512 eval_spmm_f32_n512.cu)
+target_link_libraries(eval_spmm_f32_n512 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
+
+## 1024
+add_executable(eval_spmm_f32_n1024 eval_spmm_f32_n1024.cu)
+target_link_libraries(eval_spmm_f32_n1024 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
+
 add_executable(eval_spmm_f64_n32 eval_spmm_f64_n32.cu)
 target_link_libraries(eval_spmm_f64_n32 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
 
@@ -22,11 +34,5 @@ target_link_libraries(eval_spmm_f64_n128_p1 utils sputnik_spmm cuSPARSE_spmm RoD
 add_executable(eval_spmm_f64_n128_p2 eval_spmm_f64_n128_p2.cu)
 target_link_libraries(eval_spmm_f64_n128_p2 utils sputnik_spmm cuSPARSE_spmm RoDe_spmm)
 
-add_executable(eval_sddmm_f32_n32 eval_sddmm_f32_n32.cu)
-target_link_libraries(eval_sddmm_f32_n32 sputnik_sddmm utils RoDe_sddmm)
-
-add_executable(eval_sddmm_f32_n128 eval_sddmm_f32_n128.cu)
-target_link_libraries(eval_sddmm_f32_n128 sputnik_sddmm utils RoDe_sddmm)
-
 add_executable(get_matrix_info get_matrix_info.cu)
 target_link_libraries(get_matrix_info utils)
\ No newline at end of file
